<?xml version="1.0" encoding="UTF-8"?><sqlb_project><db path="/Users/dabanaintenque/Desktop/Fall_2022_Schedule/Introduction_To_Database/Chinook/Chinook_Sqlite_AutoIncrementPKs.sqlite" readonly="0" foreign_keys="0" case_sensitive_like="0" temp_store="0" wal_autocheckpoint="0" synchronous="1"/><attached/><window><main_tabs open="browser pragmas query structure" current="2"/></window><tab_structure><column_width id="0" width="300"/><column_width id="1" width="0"/><column_width id="2" width="100"/><column_width id="3" width="3241"/><column_width id="4" width="0"/><expanded_item id="0" parent="1"/><expanded_item id="1" parent="1"/><expanded_item id="2" parent="1"/><expanded_item id="3" parent="1"/></tab_structure><tab_browse><current_table name="4,5:mainAlbum"/><default_encoding codec=""/><browse_table_settings><table schema="main" name="Album" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort/><column_widths><column index="1" value="51"/><column index="2" value="300"/><column index="3" value="48"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table></browse_table_settings></tab_browse><tab_sql><sql name="SQL 4">
	SELECT name as artis_name, count  (AlbumId) as album_ct
	From Artist
	LEFT JOIN Album using(ArtistId)
	Where name like 'Santana%'
	Group By Artist.name;
	
	SELECT Name as artist_name,
	( Select count(*)
	From Album
	where album.ArtistId=artist.artistId
	)As  album_ct
	FROM artist 
	where name like 'santana%'
	Order by album_ct desc,  name;
	
	Select artist_name, Count(q1.AlbumId) as album_ct
	FROM( select artist.ArtistId as artist_id,
							Name As artist_name, AlbumId
					from Artist
					LEFT JOIN album USING(artistId)
					Where Name Like 'Santana%'
					) q1
					
		GROUP By artist_id
		Order By album_ct DESC, artist_name;
		
		
		
		SELECT Min(n1.sum_q),
						Max(n1.sum_q),
						Avg(n1.sum_q),
						Count(*) as num_custumers
		 From 
		( SELECT   CustomerId, sum(quantity) as sum_q
		FROM Invoice
		JOIN InvoiceLine USING (InvoiceId)
		GROUP By CustomerId
		)n1;
	

		/*CREATE View  q2 as 
		SELECT   CustomerId, sum(quantity) as sum_q
		FROM Invoice
		JOIN InvoiceLine USING (InvoiceId)
		GROUP By CustomerId;
		
		SELECT Min(q2.sum_q) As min_q,
						Max(q2.sum_q) As max_q,
						Avg(q2.sum_q),
						Count(*) 
		From q2;
		
	  
		SELECT  (Genre.name) as g_name, count(genre.GenreId) as g_ct From Genre,
		(	 SELECT Count ((TrackId/TrackId)*100) as percent
		     FRom track  
			) q3 
		JOIN Track using(GenreId)
	  		 
		 GROUP By Genre.Name
		-- ORDER By GenreId DESC   
		
		CREATE View q3 as
		SELECT  (Genre.name) as g_name, count(genre.GenreId) as g_ct From Genre,
		(100.0 * count(genre.genreId)/ SELECT count(*) from track)) as precentage
		From Genre JOIN track USING(GenreId)
		Group By Genre.GenreId
		ORDER By percentage DESC;
		
		From q3; */
		
		

		
		
	
		
		
		
			
		
	</sql><sql name="SQL 7">	
	
																																			---------------------  Lecture I and II -------------------------
	-- Exercise #1 
	
				-- Get all information about all artists
				
						Select *From Artist;
						
	-- Exercise # 2
	
              -- Get all artis names
			  
					SELECT Name From Artist;
				
	--Exercise # 3
					
					-- Get all employee names (first &amp; last), with their full address  
					--  info ( address, city, state, zip, country)
					
					SELECT FirstName, LastName, Address, city, state, PostalCode, Country From Employee;
					
		
		
	--Exercise # 4
	
					-- Get all invoice line(s) with invoice, UnitPrice, Quantity
					
					SELECT invoiceid, unitPrice, Quantity From invoiceLine;
					
					
 --Exercise # 5
					-- Get the billing country of all invoices totaling more than $10
					
					SELECT BillingCountry From Invoice
					Where total &gt; 10;
					
-- Execrcise # 6
			
					--Get all information about tracks whose name contains the word &quot;Rock&quot;
					
					SELECT * from track
					Where Name like &quot;Rock&quot;;
					
-- Exercise # 7 
               --Get the name (first, last) of all non-boss employess in calgary  (Roports To is NULL for the boss)
			   
			   SELECT FirstName, LastName
			   From Employee
			  Where City In ('Calgary') And (ReportsTo is Not Null);
			  
--Exercise # 8
				
				-- Get all German invoices greater than $1, output the city using column header 'german_city&quot; and &quot;total&quot; prepending $ to the total.
				
				SELECT BillingCity as german_city, (&quot;$&quot; || Total ) as total From invoice
				WHERE BillingCountry = 'Germany'  And (Total &gt; 1);
				
--Exercise # 9
				
				-- Order all employee information by last name (alphabetical), then first anme (alphabetical), then BirthDate (youngest first)
				
				 SELECT * 
					From Employee
					ORDER By LastName ASC, FirstName ASC, BirthDate DESC;
	
	-- Exercise # 10
				-- Get all invoice info from the USA with  greater than or equal to $10 total, ordered by the total (highest first), and then by state (alphabetical), then by city (alphabetical)
				
				SELECT * From invoice
				Where (BillingCountry = 'USA') And Total &gt;= 10
				Order By total DESC, BillingState, BillingCity;
				 
				 
--Exercise # 11    DISTINCT
							
			
			 SELECT BillingState
			 FROM Invoice
			 WHERE BillingCountry = 'USA'
			 ORDER By BillingState;
			 
			 SELECT DISTINCT BillingState
			 From Invoice
			 Where BillingCountry = 'USA'
			 ORDER By BillingState; 
			 
-- Exercise # 12       JOIN

				-- Get all Canadian cities in which customers live ( call result &quot;city&quot; lowercase)
				
				SELECT  City as city
				FROM Customer
				WHERE Country = &quot;Canada&quot;;
				
				
				-- Get all Canadian cities in which employees live ( call result &quot;city&quot; lowercase)
				
				SELECT City as city
				From Employee;
				
--Exercise # 13 
						
					-- get all Canadian cities in which employees OR customers live (including duplicates)
				
				SELECT  City as city
				FROM Customer
				WHERE Country = &quot;Canada&quot;
				
				UNION ALL
				SELECT City as City
				from Employee
				WHERE Country = &quot;Canada&quot;;
				
--Exercise # 14

				--get all Canadian cities in which employees Or Customer live (excluding dupliccates)
				
				
					
				SELECT  City as city
				FROM Customer
				WHERE Country = &quot;Canada&quot;
				
				UNION 
				SELECT City as City
				from Employee
				WHERE Country = &quot;Canada&quot;;
				
--Exercise # 15
		
			-- get all Canadian cities in which employees and customers live (Excluding duplicates [ no MySQL support]
			
			SELECT  City as city
				FROM Customer
				WHERE Country = &quot;Canada&quot;
				INTERSECT
				SELECT City as City
				from Employee
				WHERE Country = &quot;Canada&quot;;
				
--Exercise # 16
		
			-- get all Canadian cities in which customers live But employees  (do not excluding duplicates) [no MySQL support]
			
				
			SELECT  City as city
				FROM Customer
				WHERE Country = &quot;Canada&quot;
				EXCEPT
				SELECT City as City
				from Employee
				WHERE Country = &quot;Canada&quot;;
				
--Exercise # 17

			-- Get the cross product of genres and media Types
				
				SELECT *
					From Genre
					INNER JOIN MediaType;
					
					
--Exercise # 18
				
				-- Get all track information, with the appropriate genre name and media type name, for all Jazz tracks whrere Miles Davis helpd Composer
				
				SELECT genre.name, mediatype.name
				From Track 
				Inner JOIN Genre USING (genreId)
				Inner JOIN MediaType USING(MediaTypeId)
				WHERE (Composer = &quot;Miles Davis&quot;);
				
				SELECT *
				From Track
				JOIN Genre USING( GenreId)
				JOIN Mediatype USING (MediaTypeId)
				Where  (genre.name = 'Jazz') AND (Composer ='Miles Davis');
				

-- Exercise # 19

			-- Get all artist And album information for those artists whose anme begins with &quot;Black&quot; (Do not include those without albums), sort by artist name, then album name
			
			SELECT *
			From Artist 
		   JOIN Album  USING(ArtistId)
			Where Artist.name like 'Black%'
			Order By artist.name,  album.Title;
			
--Exercise # 20

		-- Get all artist And album information for those artists whose name begins with &quot;Black&quot; (do include those WITHOUT album!), sort by artist name, then album Title
		
		  SELECT * 
		  From Artist
		  Left JOIN album USING (ArtistId)
		Where Name like 'Black%'
		ORDER By Name, Title;
		
				
			
				
				
				
			
				
				
				
			   
			   
	          
					</sql><sql name="SQL 6">
																																-----------------  Lecture III      Advance SQL-------------------
																																
-- Exercise #1

			--  1- Get the number of employees Count

					SELECT Count( DISTINCT ReportsTo) From Employee;
			 
			 -- # 2 Compute the total cost of an Album
			 
					  SELECT    SUM(UnitPrice)
					  From Track
					  WHERE  AlbumId = 1;
					  
			-- # 3 Get the min/max/average track unit price overall
						-- Min (), Max(), Avg()
					
						SELECT 
						     Min(unitprice)  as min_price,
							 Max(unitprice) as max_price,
							 AVG(unitprice) as avg_price
					 From track;
					 

--Exercise # 2 Grouping

				SELECT  MediaType.name as media_type,
				Min (UnitPrice) as min_unitPrice,
				Max (UnitPrice) as max_unitPrice,
				Avg( unitprice) as avg_unitprice
				From track 
				JOIN MediaType USING (MediaTypeId)
				GROUP By MediaType.name
				ORDER By MediaType.name;
			 
			 
--Exercise: #3
                 
				    -- Using only the invoiceLine table, compute the total cost of each order, sorted by total (Greatest first)
					  
					  SELECT  InvoiceId, SUM(UnitPrice*Quantity) as total
					  From InvoiceLine
					 GROUP BY InvoiceId
					 ORDER By Total DESC;
					 
--Exercise: # 4

					-- get the average, sum and number of all US invoices, grouped by city and state (Just in case same cityname, but different state) Order By average cost (greatet first)
					
					SELECT BillingCity, BillingState,  Avg(total) as avg_total, Sum(total) as Sum_total, count(BillingCountry) as ct
					From invoice
					Where BillingCountry = 'USA'
					GROUP By BillingCity, BillingState
					ORDER By avg_total DESC;
					
--Exercise # 5
	
				-- Generate a ranked list of Queen's best selling tracks. Display the track id, track name, and album name, along with number of tracks sold, sorted by tracks sold (greatest first)
				-- then by track name (alphabetical)
				
				SELECT  TrackId,  Track.Name,   Title, sum(Quantity) as  num_sold
				From Track
				JOIN album USING(albumId)
				Join Artist using( artistId)
				Join InvoiceLine using( trackId)
				Where Artist.name = 'Queen'
				
				Group By TrackId
				ORDER By	num_sold DESC, track.name;
			
--Exercise # 6 HAVING

			-- Generate a ranked list of Queen's best selling tracks. Display the track id, track name, and album name, along with number of tracks sold, sorted by tracks sold (greatest first), Then by track name 
			-- alphabetical Only show those tracks that have sold at least twice
			
			 SELECT TrackId, Track.Name, Title,  Sum(Quantity) as num_sold
			 From Artist 
			 JOIN Album USING (ArtistId)
			 JOIN Track USING (AlbumId)
			 JOIN InvoiceLine USING (trackId)
			 WHERE Artist.name = 'Queen'
			 GROUP By TrackId
			 HAVING num_sold &gt;= 2
			 ORDER By num_sold DESC, Track.name;
			 
-- Exercise # 7 
			
			-- Each track has a genre, and different tracks of the same album can be of different gentres. Produce a ranked list of genres according to how many albums contain at least one track of that genres. 
			-- You are only to include those genres that are represented on at least 10 albums, and should sort the results by album count (greatest first).
			
			SELECT Genre.name as g_name, count(DISTINCT Albumid) as cnt
			From Genre
			JOIN Track USING(genreId)
			Join Album USING (AlbumId)
			Group by Genre.name
			HAVING cnt &gt;= 10
			Order By cnt DESC;
			
--Exercise # 8

				-- Get all track information for the album &quot;Jagged Little Pill&quot; ( Let's try it without subquery first)
				
				SELECT *
				From Track
				JOIN Album USING (AlbumId)
				Where Album.Title = 'Jagged Little Pill';
				
	
--Exercise # 9    Subquery in WHERE 

						-- Get all track information for the album &quot;Jagged Little Pill&quot;
						
					SELECT * 
					From Track
						Where AlbumId = (
						 SELECT AlbumId 
						 From album 
						 Where title = &quot;Jagged Little Pill&quot;
						);
						
--Exercise # 10
		
				-- Get all track information for the artist &quot;Queen&quot; (Let's try it without subquery first)
					  
				   SELECT *
				  From Track
				  JOIN Album USING(Albumid) 
				  JOIN Artist using(ArtistId)
				  Where artist.name = 'Queen';
				  

				  
--Exercise # 11 Subquery in Select 
				
				-- For each artist starting with &quot;Santana&quot;, get the number of albums, sorted by count (greatest first), than artist alphabetical). (Let's try it WITHOUT subquery first)
				
				  SELECT Artist.name as artist_name, count( Albumid) as album_ct
				  From Artist 
				  LEFT  JOIN Album USING (artistId)
				  Where name like 'santana%'
				  GROUP By Artist.name
				  Order By album_ct DESC;
				  
				  -- For each artist starting with &quot;Santana&quot;, get the number of albums, sorted by count (greatest first), than artist alphabetical).
				  
				  SELECT  Name as artist_name,
				  (
				  SELECT Count (*)
				   From Album
				   WHERE Album.Artistid = Artist.ArtistId
				   ) as album_ct
				  From Artist
				  Where Name like 'santana%'
				  ORDER By  Album_ct DESC;
				  
				   -- For each artist starting with &quot;Santana&quot;, get the number of albums, sorted by count (greatest first), than artist alphabetical). Better Example
				   SELECT artist_name, Count(q1.AlbumId) As Album_ct
				   FROM
				  (       SELECT artist.ArtistId As artist_id,
								Name as artist_name, Albumid
				     From Artist
					 LEFT JOIN Album using (ArtistId)
					 WHERE Name like 'Santana%'
					 
					) q1
					Group By Artist_id
					ORDER By Album_ct DESC, artist_name;
				   
				   
				   
-- Create a report of the distribution of tracks into genres. The result set should list each genre by name, the number of tracks that genre, and the percentage of overall tracks for that genre.GenreId  
-- The rows should be sorted by the percentage
			
			
			/*CREATE VIEW BB8 As 
			SELECT*, Count(GenreID) As g_ct,
							(SELECT Count(*) From Track) As t_ct
							
							From Genre JOIN TRAck Using(GenreId)
							GROUP By GenreId;
							
		SELECT Name as g_name, g_ct,
		(100.0 * g_ct / t_ct) as g_percentage
		
		From BB8
		ORDER By g_percentage DESC, g_name; */
		
		
		
-- Class Exercise
    -- Find the highest spending Customers: et a ranked list of customers (firstName, last name) who have spent at least $40, sorted by amount spent(greatest first), then last name, then first name
	
	   SELECT FirstName, LastName, Sum(total) as total_spent
	   From Customer
	   JOIN Invoice USING(CustomerId)
	   Group By LastName
	   HAVING total_spent &gt;= 40
	   ORDER By Total_spent DESC, LastName, FirstName;
	  
	  
	  SELECT *
	  From 
	 (SELECT FirstName, LastName,  Sum(total) as total_spent
	 from Customer
	 JOIN Invoice using (CustomerId)
	 GROUP By CustomerId
	
	 )q3
	 
	 ORDER By q3.total_spent DESC; 
	 

-- Example of Where  Subquery

			-- Get all track information for the album &quot;Jagged Little Pill&quot; (Let's try it without subquery first 
			
			SELECT *
			From Track
			JOIN Album USING (Albumid)
			Where Title = &quot;Jagged Little Pill&quot;;
			
		-- Get all track information for the album &quot;Jagged Little Pill&quot;
		
	  SELECT *
	  From Track 
	  Where AlbumId =  (
		SELECT AlbumId
		From Album
		WHERE Title = &quot;Jagged Little Pill&quot;
		);
		
		-- Get all track information for the artist &quot;Queen&quot;  (Let's try it without subquery first)
		
		  SELECT * 
		  From Track 
		  JOIN Album USING (AlbumId)
		  JOIN Artist USING (Artistid)
		  WHERE Artist.name = &quot;Queen&quot;;
		  
		  -- Get all track information for the artist &quot;Queen&quot;
		  
		  
		  SELECT * 
		  From Track 
		  Where Albumid = (
		   SELECT AlbumId
		   From Album
		   LEFT JOIN Artist USING (ArtistId)
			Where Artist.Name = &quot;Queen&quot;
			);
		  
	
				  
				
				  
				  
				 
				
		
		
			   
			
				
					
					

				
					
			 
			 
			
		</sql><current_tab id="2"/></tab_sql></sqlb_project>
